<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">

	<!--
	 MEMBER 테이블의 조회 결과를 Member VO 객체로 옮겨주는 ResultMap 
	 -->
	<resultMap type="member" id="memberResultSet">
		<result column="USER_ID" property="userId"/>
		<result column="USER_PWD" property="userPwd"/>
		<result column="USER_NAME" property="userName"/>
		<result column="EMAIL" property="email"/>
		<result column="USER_BIRTH" property="userBirth"/>
		<result column="PHONE" property="phone"/>
		<result column="ADDRESS" property="address"/>
		<result column="ENROLL_DATE" property="enrollDate"/>
		<result column="STATUS" property="status"/>
	</resultMap>
	<!-- BUYLIST ResultMap -->
	<resultMap type="buylist" id="buylistResultSet">
		<result column="BUYLIST_ID" property="buyListId"/>
		<result column="RESERVE_CODE" property="reserveCode"/>
		<result column="RESERVE_CONCERT_ID" property="reserveConcertId"/>
		<result column="RESERVE_TICKET" property="reserveTicket"/>
		<result column="RESERVE_SUM" property="reserveSum"/>
		<result column="RESERVE_PAYMENT" property="reservePayment"/>
		<result column="RESERVE_REFUND" property="reserveRefund"/>
		<result column="USER_ID" property="userId"/>
	</resultMap>
	<!-- COONCERT ResultMap -->
	<resultMap type="concert" id="concertResultSet">
		<result column="CONCERT_ID" property="concertId"/>
		<result column="CONCERT_NAME" property="concertName"/>
		<result column="AGE_LIMIT" property="ageLimit"/>
		<result column="PRICE" property="price"/>
		<result column="THUMBNAIL_ROOT" property="thumbnailRoot"/>
		<result column="DETAIL_ROOT" property="detailRoot"/>
		<result column="PLAYTIME" property="playTime"/>
		<result column="START_DATE" property="startDate"/>
		<result column="END_DATE" property="endDate"/>
		<result column="CATEGORY" property="category"/>
		<result column="HOLE_NAME" property="holeName"/>
		<result column="STATUS" property="status"/>
	</resultMap>
	
	<!-- 회원가입일 count 용 ResultMap -->
	<resultMap type="enrollCount" id="enrollCountResultSet">
		<result column="DATE" property="enrollDate"/>
		<result column="COUNT" property="enrollCount"/>
	</resultMap>
	
	<!-- 로그인용 쿼리문 -->

	<select id="loginMember" parameterType="member"
	  		resultMap="memberResultSet">
	<!--
	암호화 작업 전 : 아이디, 비번 둘다 동등 비교
	 SELECT *
	FROM MEMBER
	WHERE USER_ID = #{userId}
	AND USER_PWD = #{userPwd}
	AND STATUS = 'Y' -->
	
	<!-- 암호화 작업 후 : 오로지 아이디만 가지고 조회 -->
	<!-- member-mapper 아이디 조회 쿼리문 변경 0604 - 무진 -->
	SELECT *
	FROM MEMBER
	WHERE USER_ID = #{userId}
	AND STATUS = '1'
	
	</select>

	<!-- 회원 가입용 쿼리문 mapper 0604 - 무진 -->
	<insert id="insertMember" parameterType="member">
		INSERT INTO MEMBER(USER_ID,
	                       USER_PWD,
	                       USER_NAME,
	                       EMAIL,
	                       USER_BIRTH,
	                       PHONE,
	                       ADDRESS)
	                VALUES(#{userId},
	                       #{userPwd},
	                       #{userName},
	                       #{email},
	                       #{userBirth},
	                       #{phone},
	                       #{address})
	</insert>
	<!-- mamber-mapper 회원정보 수정용 쿼리문 0604 - 무진 -->
	<update id="updateMember" parameterType="member">
		UPDATE MEMBER
		    SET USER_NAME = #{userName}
		        , EMAIL = #{email} 
		        , USER_BIRTH = #{userBirth}
		        , PHONE = #{phone}
		        , ADDRESS = #{address}
		        , STATUS = #{status}
		WHERE USER_ID = #{userId}
	</update>
	
	<!-- mamber-mapper 회원 탈퇴용 쿼리문 0604 - 무진 -->
	<update id="deleteMember" parameterType="string">
		UPDATE MEMBER
	    SET STATUS = '2'
		WHERE USER_ID = #{userId}
		 AND STATUS = '1'
	</update>
	
	<!-- 아이디 중복확인용 쿼리문 -->
	<select id="idCheck" parameterType="string" resultType="_int">
		SELECT COUNT(*)
		  FROM MEMBER
		 WHERE USER_ID = #{userId}
	</select>
	
	<!-- 전화번호 중복 검사용 메소드 0610 - 무진 -->
	 <select id="checkPhone" parameterType="String" resultType="_int">
        SELECT COUNT(*) 
        FROM MEMBER 
        WHERE PHONE = #{phone}
    </select>
	<!-- 이메일 중복 검사용 메소드 0610 - 무진 -->
	<select id="checkEmail" parameterType="String" resultType="_int">
        SELECT COUNT(*) 
        FROM MEMBER 
        WHERE EMAIL = #{email}
    </select>
    
     <select id="findIdByNameAndPhone" resultType="String">
        SELECT USER_ID
        FROM MEMBER
        WHERE USER_NAME = #{userName} AND PHONE = #{phone} AND STATUS = 1
    </select>

    <update id="updatePasswordByEmail">
        UPDATE MEMBER
        SET USER_PWD = #{newPwd}
        WHERE EMAIL = #{email} AND STATUS = 1
    </update>
    
     <!-- 비밀번호 변경 쿼리 -->
	<update id="updatePassword" parameterType="map">
	    UPDATE MEMBER
	    SET USER_PWD = #{encPwd}
	    WHERE USER_ID = #{userId}
	</update>
    
    <!-- 예매내역 수 조회 -->
    <select id="selectTicketCount" parameterType="string" resultType="_int">
		SELECT COUNT(*)
		  FROM BUYLIST
		 WHERE USER_ID = #{userId}
	</select>
	<!-- 예매내역 조회 -->
	<select id="selectMyTicketList" parameterType="string" resultMap="buylistResultSet">
		SELECT BUYLIST_ID
		     , CONCERT_NAME AS "RESERVE_CONCERT_ID"
		     , RESERVE_TICKET
		     , RESERVE_SUM
		     , RESERVE_PAYMENT
		     , B.STATUS
		  FROM BUYLIST B
		  JOIN CONCERT_INFO ON (RESERVE_CONCERT_ID = CONCERT_ID)
		 WHERE USER_ID = #{userId}
		 ORDER BY RESERVE_PAYMENT DESC
	</select>
    
    <select id="findMemberByIdAndEmailAndName" parameterType="map" resultMap="memberResultSet">
	    SELECT *
	    FROM MEMBER
	    WHERE USER_ID = #{userId} AND EMAIL = #{email} AND USER_NAME = #{userName} AND STATUS = 1
	</select>
	
	<select id="selectMyWishList" parameterType="string" resultType="_int">
		SELECT COUNT(*)
		FROM WISHLIST w
		JOIN CONCERT_INFO c ON w.CONCERT_ID = c.CONCERT_ID
		WHERE w.USER_ID = #{userId}
		AND c.END_DATE > SYSDATE
    </select>
	<!-- 관리자용 쿼리문 -->
	<!-- 회원 전체조회용 쿼리문 -->
	<select id="adSelectList" resultMap="memberResultSet">
		SELECT * 
		FROM MEMBER
	</select>
	
	<!-- 회원 상세조회용 쿼리문 -->
	<select id="adMemberDetail" parameterType="String" resultMap="memberResultSet">
	    SELECT *
	      FROM MEMBER
	     WHERE USER_ID = #{userId}
	</select>
	
	
	<!--  관리자 페이지용 쿼리문 작성 -  0619 수정 -->
	
	<!-- 전체 회원 수  -->
	<select id="selectMemberCount" parameterType="string" resultType="_int">
		SELECT COUNT(*)
		  FROM MEMBER
	</select>
	
	<!-- 회원 연령 조회 -->
	<select id="admemberAge" parameterType="string" resultType="_int">
		SELECT TRUNC(MONTHS_BETWEEN(SYSDATE, USER_BIRTH)/12) AS AGE
	      FROM MEMBER
	</select>
	
	<!-- 월별 회원가입 -->
	<select id="enrollMonth" parameterType="string" resultMap="enrollCountResultSet">
		SELECT EXTRACT(MONTH FROM ENROLL_DATE) AS "DATE",
			COUNT(*) AS "COUNT"
		  FROM MEMBER
		GROUP BY EXTRACT(MONTH FROM ENROLL_DATE)
		ORDER BY EXTRACT(MONTH FROM ENROLL_DATE)
	</select>
	
	<!-- 월별 매출액 -->
	<select id="salesMonth" parameterType="string" resultMap="enrollCountResultSet">
		SELECT EXTRACT(MONTH FROM RESERVE_PAYMENT) AS "DATE",
		       SUM(RESERVE_SUM) AS "COUNT"
		  FROM BUYLIST
		GROUP BY EXTRACT(MONTH FROM RESERVE_PAYMENT)
		ORDER BY EXTRACT(MONTH FROM RESERVE_PAYMENT)
	</select>
	
</mapper>
