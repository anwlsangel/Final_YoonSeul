<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="concertMapper">

<resultMap type="concert" id="concertResultSet">
		<result column="CONCERT_ID" property="concertId"/>
		<result column="CONCERT_NAME" property="concertName"/>
		<result column="AGE_LIMIT" property="ageLimit"/>
		<result column="PRICE" property="price"/>
		<result column="THUMBNAIL_ROOT" property="thumbnailRoot"/>
		<result column="DETAIL_ROOT" property="detailRoot"/>
		<result column="PLAYTIME" property="playTime"/>
		<result column="START_DATE" property="startDate"/>
		<result column="END_DATE" property="endDate"/>
		<result column="CATEGORY" property="category"/>
		<result column="HOLE_NAME" property="holeName"/>
		<result column="STATUS" property="status"/>
	</resultMap>
	
	<resultMap type="concertDate" id="concertDateResultSet">
		<result column="CONCERT_DATE_ID" property="concertDateId" />
		<result column="CONCERT_DATE" property="concertDate" />
		<result column="RUNNINGTIME" property="runningTime" />
		<result column="CONCERT_ID" property="concertId" />
		<result column="TIME_ONLY" property="timeOnly" />
	</resultMap>
	
	<!-- 첫 리스트 및 필터링 조회용 쿼리문 -->
	<select id="selectList" parameterType="map" resultMap="concertResultSet">
	    SELECT c.CONCERT_ID, c.THUMBNAIL_ROOT, c.CONCERT_NAME, c.START_DATE, c.END_DATE, c.CATEGORY, c.PRICE, h.HOLE_NAME, h.STATUS, COUNT(r.REVIEW_ID) AS REVIEW_COUNT
	    FROM CONCERT_INFO c
	    JOIN HOLE h ON c.HOLE_NAME = h.HOLE_NAME
	    LEFT JOIN REVIEW r ON c.CONCERT_ID = r.CONCERT_ID
	    WHERE c.END_DATE > SYSDATE
	    <if test="category != null and category != '전체'">
	        AND c.category = #{category}
	    </if>
	    <if test="sort == 'standing'">
	        AND h.STATUS = 2
	    </if>
	    <if test="sort == 'seating'">
	        AND h.STATUS = 1
	    </if>
	    GROUP BY c.CONCERT_ID, c.THUMBNAIL_ROOT, c.CONCERT_NAME, c.START_DATE, c.END_DATE, c.CATEGORY, c.PRICE, h.HOLE_NAME, h.STATUS
	    <choose>
	        <when test="sort == 'popularity'">
	            ORDER BY REVIEW_COUNT DESC
	        </when>
	        <when test="sort == 'date'">
	            ORDER BY c.START_DATE DESC
	        </when>
	        <when test="sort == 'price'">
	            ORDER BY c.PRICE ASC
	        </when>
	        <otherwise>
	            ORDER BY c.CONCERT_ID DESC
	        </otherwise>
	    </choose>
	</select>

	<!-- 검색용 쿼리문 -->
		<select id="searchList" parameterType="map" resultMap="concertResultSet">
		    SELECT c.*, h.HOLE_NAME, h.STATUS
			FROM CONCERT_INFO c
			JOIN HOLE h ON c.HOLE_NAME = h.HOLE_NAME
			WHERE c.CONCERT_NAME LIKE '%' || #{keyword} || '%'
			  AND c.END_DATE > SYSDATE
		    <if test="category != null and category != '전체'">
		        AND c.category = #{category}
		    </if>
		    <if test="sort == 'standing'">
		        AND h.STATUS = 2
		    </if>
		    <if test="sort == 'seating'">
		        AND h.STATUS = 1
		    </if>
		    ORDER BY
		    <choose>
		        <when test="sort == 'popularity'">
		            c.START_DATE DESC
		        </when>
		        <when test="sort == 'date'">
		            c.START_DATE DESC
		        </when>
		        <when test="sort == 'price'">
		            c.PRICE ASC
		        </when>
		        <otherwise>
		            c.CONCERT_ID DESC
		        </otherwise>
		    </choose>
		</select>
    
    <!-- 상세조회용 쿼리문 -->
    <select id="concertDetail" parameterType="int" resultMap="concertResultSet">
	    SELECT *
        FROM CONCERT_INFO
        WHERE CONCERT_ID = #{concertId}
    </select>
        	
     <!-- 게시글 갯수 -->
	 <select id="selectListCount" resultType="_int">
		SELECT COUNT(*)
		  FROM QNA
		 WHERE STATUS = '1'
	</select> 
	<!-- 관심공연용 쿼리문 - 0613 무진 -->
	<insert id="insertWishlist" parameterType="map">
	    MERGE INTO WISHLIST w
	    USING (SELECT #{userId} AS USER_ID, #{concertId} AS CONCERT_ID FROM DUAL) src
	    ON (w.USER_ID = src.USER_ID AND w.CONCERT_ID = src.CONCERT_ID)
	    WHEN NOT MATCHED THEN
	    INSERT (USER_ID, CONCERT_ID)
	    VALUES (src.USER_ID, src.CONCERT_ID)
	</insert>
	
	<delete id="deleteWishlist" parameterType="map">
	    DELETE FROM WISHLIST
	    WHERE USER_ID = #{userId} AND CONCERT_ID = #{concertId}
	</delete>   	
	
	<select id="selectHoleStatus" resultType="_int">
	 	SELECT h.STATUS
	    FROM CONCERT_INFO c
	    JOIN HOLE h ON c.HOLE_NAME = h.HOLE_NAME
	    WHERE c.CONCERT_ID = ${concertId}
	</select>
	
	
	
	
	
	
	
	<!-- 관리자용 쿼리문 -->
	<!-- 공연 전체조회용 쿼리문 -->
	<select id="adSelectList" resultMap="concertResultSet">
		SELECT *
		FROM CONCERT_INFO
	</select>
	
	<!-- 공연 상세조회용 쿼리문 -->
	<select id="adConcertDetail" resultType="_int" resultMap="concertResultSet">
		SELECT *
		  FROM CONCERT_INFO
		 WHERE CONCERT_ID = #{concertId} 
	</select>
	
	<!-- 공연 정보 수정용 쿼리문 -->
	<update id="adUpdateConcert" parameterType="concert">
		UPDATE CONCERT_INFO 
		   SET CONCERT_NAME = #{concertName},
		       AGE_LIMIT = #{ageLimit},
		       PRICE = #{price},
		       THUMBNAIL_ROOT = #{thumbnailRoot},
		       DETAIL_ROOT = #{detailRoot},
		       PLAYTIME = #{playTime},
		       START_DATE = #{startDate},
		       END_DATE = #{endDate},
		       CATEGORY = #{category},
		       HOLE_NAME = #{holeName},
		       STATUS = 1
		WHERE CONCERT_ID = #{concertId}
	</update>
	
	<!-- 위시리스트 조회용 쿼리문 -->
	<select id="selectWishList" parameterType="String" resultMap="concertResultSet">
		SELECT c.*
       FROM CONCERT_INFO c
       JOIN WISHLIST w ON c.CONCERT_ID = w.CONCERT_ID
      WHERE w.USER_ID = #{userId}
		   AND c.END_DATE > SYSDATE
	</select>
      
    <!-- 특정 공연의 좋아요 수를 계산하는 쿼리 - 0618 무진 -->
    <select id="selectWishlistCount" parameterType="int" resultType="_int">
        SELECT COUNT(*)
        FROM WISHLIST
        WHERE CONCERT_ID = #{concertId}
    </select>    
    
    <select id="selectSeatCount" parameterType="int" resultType="_int">
    	SELECT SEATCOUNT
		FROM CONCERT_INFO CI
		JOIN HOLE H ON CI.HOLE_NAME = H.HOLE_NAME
		WHERE CI.CONCERT_ID = #{concertId}
    </select>
    
    <select id="selectDateList" parameterType="int" resultMap="concertDateResultSet">
	    SELECT 
	        CONCERT_DATE_ID,
	        CONCERT_DATE,
	        RUNNINGTIME,
	        CONCERT_ID,
	        TO_CHAR(CONCERT_DATE, 'HH24:MI') AS TIME_ONLY
	    FROM CONCERT_DATE
	    WHERE CONCERT_ID = #{concertId}
	</select>
</mapper>