package com.kh.yoonsart.common;

import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.kh.test.controller.TestController;

/**
 * Servlet implementation class DispatcherServlet
 */
// login.me 든 update.bo 든 모든 요청은 이 서블릿으로 들어오게 됨!!
@WebServlet(urlPatterns = "/")
// > http://localhost:8888/test/~~~ 로 들어오는 요청을 다 받겠다.
public class DispatcherServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public DispatcherServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//System.out.println("잘 되냐?");
		
		// 현재 들어온 이 요청이 어느 요청인지 판별하는 구문
//		System.out.println(request.getRequestURL());
//		// > 현재 이 요청의 full url 주소
//		System.out.println(request.getRequestURI());
//		// > 현재 이 요청의 서버 뒤의 url 주소 부분만 리턴
//		System.out.println(request.getContextPath());
//		// > 현재 이 요청의 context root 를 리턴(/test)
//		System.out.println(request.getServletPath());
//		// > 현재 이 요청의 context root 뒤의 url 매핑값을 리턴
//		System.out.println(request.getServerName());
//		// > 이 서버의 ip 주소 리턴
//		System.out.println(request.getServerPort());
//		// > 이 서버의 포트번호 리턴
		
		//System.out.println("현재 요청 : " + request.getServletPath());
		
		// 모든 요청이 이 서블릿으로 넘어오고, 현재 이 요청이 어느 요청 인지 알 수 있기 때문에 이 점을 활용
		String returnStr = "";
		
		switch (request.getServletPath()) {
		case "/test1.do" :
		 returnStr = new TestController().test1();
			break;
		
		case "/test2.do" :
			returnStr = new TestController().test2();
			
			break;
		
		case "/test3.do" : 
			returnStr = new TestController().test3();
			
			break;
		
		case "/test4.do" : 
			returnStr = new TestController().test4();
			
			break;
		
		case "/test5.do" : 
			returnStr = new TestController().test5();
			
			break;
		}
		
		//System.out.println("리턴된 문자열 : " + returnStr);
		
		String[] temp = returnStr.split(":");
		
//		for(int i = 0; i < temp.length; i++) {
//			System.out.println(temp[i]);
//		}
		
		// 1.  그냥 문자열을 리턴했을 경우 (test1 등)
		// > temp[0] = "test1";
		// 2. redirect: 으로 시작하는 문자열을 리턴했을 경우
		// ("redirect:/test1.do" 등)
		// > temp[0] = "redirect";
		//   temp[1] = url 주소;
		
		if(temp[0].equals("redirect")) {
			// url 재요청 방식으로 응답
			response.sendRedirect("http://localhost:8888" + request.getContextPath() + temp[1]);
		} else {
			// 포워딩방식으로 응답
			// 포워딩
			request.getRequestDispatcher("WEB-INF/views/" + returnStr + ".jsp").forward(request, response);
		}
		
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
